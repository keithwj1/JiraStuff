import com.atlassian.crowd.embedded.api.CrowdService
import com.atlassian.crowd.embedded.api.User
import com.atlassian.crowd.embedded.api.UserWithAttributes
import com.atlassian.crowd.embedded.impl.ImmutableUser
import com.atlassian.jira.bc.user.UserService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.security.groups.GroupManager
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.issue.search.SearchProvider
import com.atlassian.jira.web.bean.PagerFilter
import org.apache.log4j.Level
import org.apache.log4j.Logger
import com.atlassian.jira.issue.MutableIssue;
import com.atlassian.jira.issue.Issue;  


Logger log = log
log.setLevel(Level.INFO)
  

void RemoveWatchers(Issue issue, ApplicationUser user)
{
    MutableIssue missue = issue as MutableIssue
    def watcherManager = ComponentAccessor.getWatcherManager()
    def locale = ComponentAccessor.getLocaleManager().getLocaleFor(user)
    def watchers = watcherManager.getWatchers(missue, locale)
    //watchers.each { watcher ->
    //    log.info "Watcher 2" 
    //    watcherManager.stopWatching(watcher, missue)
    //}
    for(cuser in watchers)
    {
        log.info("Removing user as watcher: " + cuser.displayName);
        watcherManager.stopWatching(cuser, missue);
    }
}


int numOfDays =  60 // Number of days the user was not logged in
int deletenumOfDays =  300 // Number of days the user was not logged in
Date dateLimit = (new Date())- numOfDays
Date deleteLimit = (new Date())- deletenumOfDays
  
UserUtil userUtil = ComponentAccessor.userUtil
CrowdService crowdService = ComponentAccessor.crowdService
UserService userService = ComponentAccessor.getComponent(UserService.class)
User updateUser
UserService.UpdateUserValidationResult updateUserValidationResult
GroupManager groupManager = ComponentAccessor.getGroupManager();
ApplicationUser asUser = ComponentAccessor.jiraAuthenticationContext.getUser()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser.class)
def searchProvider = ComponentAccessor.getComponent(SearchProvider.class)
def issueManager = ComponentAccessor.getIssueManager()
def issueService = ComponentAccessor.getIssueService()
def commentManager = ComponentAccessor.getCommentManager()


long count = 0
long deletecount = 0
  
def projectKey = "MRB" //THE PROJECT KEY
userUtil.getUsers().each {
    if (it.getName() == "DeletedUser")
    {
        return;
    }
    UserWithAttributes user = crowdService.getUserWithAttributes(it.getName())
    if(groupManager.isUserInGroup(it.getName(),"jira-administrators"))
    {
        return;
    }
    String lastLoginMillis = user.getValue('login.lastLoginMillis')
    if (lastLoginMillis?.isNumber()) {  
        Date d = new Date(Long.parseLong(lastLoginMillis))
        if (d.before(deleteLimit)) {
            ApplicationUser thisUser = ComponentAccessor.getUserUtil().getUserByName(it.getName())
            log.info "Trying to Remove $thisUser"
            final UserService.DeleteUserValidationResult deleteresult = userService.validateDeleteUser(asUser, thisUser) 
            if (deleteresult.isValid()) { 
                // Uncomment the line ncommentbelow to actually delete the account. It is commented for testing.
                userService.removeUser(asUser, deleteresult)
                log.info "REMOVAL SUCCESSFUL - $thisUser" 
                deletecount++
            }
            else { 
            	log.info "REMOVAL FAILED - $thisUser " + deleteresult.getErrorCollection().errorMessages
                ApplicationUser DeleteUser = ComponentAccessor.getUserUtil().getUserByName("DeletedUser")
                //clear assignee
                String querystring = "assignee = ${thisUser.getName()}"
                def query = jqlQueryParser.parseQuery(querystring)
                def projectIssues = searchProvider.search(query, asUser, PagerFilter.getUnlimitedFilter()).issues.key
				projectIssues.each{ issueKey ->                  
 					def issue = issueManager.getIssueByCurrentKey(issueKey) 
                    log.info "Attempting to remove Assignee - $issue - $thisUser" 
                    RemoveWatchers(issue,thisUser);
                    def validateAssignResult = issueService.validateAssign(DeleteUser, issue.id, issue.reporterId)
					issueService.assign(asUser, validateAssignResult)
                    commentManager.create(issue, asUser,"Originally Assigned to "+ thisUser.displayName, false)
                    log.info "Assignee Removed - $issue - $thisUser" 
                }
                querystring = "reporter = ${thisUser.getName()}"
                query = jqlQueryParser.parseQuery(querystring)
                projectIssues = searchProvider.search(query, asUser, PagerFilter.getUnlimitedFilter()).issues.key
                projectIssues.each{ issueKey ->
 					def issue = issueManager.getIssueByCurrentKey(issueKey) 
                    log.info "Attempting to remove Reporter - $issue - $thisUser"
                    RemoveWatchers(issue,thisUser);
                    def validateAssignResult = issueService.validateAssign(DeleteUser, issue.id, issue.reporterId)
					//issueService.assign(asUser, validateAssignResult)
                    //missue.setReporter(DeleteUser)
                    issue.reporterId = DeleteUser.getName()
                    commentManager.create(issue, asUser,"Originally Reported By "+ thisUser.displayName, false)
                    log.info "Reporter Removed - $issue - $thisUser" 
                }
                querystring = "issueFunction in commented('by ${thisUser.getName()}')"
                query = jqlQueryParser.parseQuery(querystring)
                projectIssues = searchProvider.search(query, asUser, PagerFilter.getUnlimitedFilter()).issues.key
                projectIssues.each
                { issueKey ->
 					def issue = issueManager.getIssueByCurrentKey(issueKey) 
                    RemoveWatchers(issue,thisUser);
                	def commentslist = commentManager.getCommentsForUser(issue, thisUser)
                    for (def comment: commentslist)
                    {
                        def comm = commentManager.getMutableComment(comment.getId());
                        if (comm.getAuthorApplicationUser() == thisUser)
                        {
                            comm.setAuthor(DeleteUser);
                            def body = comm.getBody();
                            body = "Originally Commented By: " + thisUser.displayName + " : " + body
                            comm.setBody(body);
                            commentManager.update(comm,false)
                            commentManager.create(issue, DeleteUser,"Originally Commented By: "+ thisUser.displayName + " : " + body , false)
                            commentManager.delete(comm)
                        }
                        
                    }
                }
            }
        }
        else if (d.before(dateLimit)) {
            if (it.isActive())
            {
                updateUser = ImmutableUser.newUser(user).active(false).toUser()
                updateUserValidationResult = userService.validateUpdateUser(updateUser)
                if (updateUserValidationResult.isValid()) {
                    userService.updateUser(updateUserValidationResult)
                    log.info "Deactivated ${updateUser.name}"
                    count++
                } else {
                    log.error "Update of ${user.name} failed: ${updateUserValidationResult.getErrorCollection().getErrors().entrySet().join(',')}"
                }
            }
        }
        
    }
}
"${count} users deactivated.\n and ${deletecount} users deleted.\n"