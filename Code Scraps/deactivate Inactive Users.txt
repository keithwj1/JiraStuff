import com.atlassian.crowd.embedded.api.CrowdService
import com.atlassian.crowd.embedded.api.User
import com.atlassian.crowd.embedded.api.UserWithAttributes
import com.atlassian.crowd.embedded.impl.ImmutableUser
import com.atlassian.jira.bc.user.UserService
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.user.util.UserUtil
import com.atlassian.jira.security.groups.GroupManager
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.jql.parser.JqlQueryParser
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.issue.search.SearchProvider
import com.atlassian.jira.web.bean.PagerFilter
import org.apache.log4j.Level
import org.apache.log4j.Logger


Logger log = log
log.setLevel(Level.INFO)


int numOfDays =  60 // Number of days the user was not logged in
Date dateLimit = (new Date())- numOfDays
  
UserUtil userUtil = ComponentAccessor.userUtil
CrowdService crowdService = ComponentAccessor.crowdService
UserService userService = ComponentAccessor.getComponent(UserService.class)
User updateUser
UserService.UpdateUserValidationResult updateUserValidationResult
GroupManager groupManager = ComponentAccessor.getGroupManager();
ApplicationUser asUser = ComponentAccessor.jiraAuthenticationContext.getUser()
def jqlQueryParser = ComponentAccessor.getComponent(JqlQueryParser.class)
def searchProvider = ComponentAccessor.getComponent(SearchProvider.class)


long count = 0
  
userUtil.getUsers().each {
    UserWithAttributes user = crowdService.getUserWithAttributes(it.getName())
    if(groupManager.isUserInGroup(it.getName(),"jira-administrators"))
    {
        return;
    }
    String lastLoginMillis = user.getValue('login.lastLoginMillis')
    if (lastLoginMillis?.isNumber()) {  
        Date d = new Date(Long.parseLong(lastLoginMillis))
        if (d.before(dateLimit)) {
            if (it.isActive())
            {
                
                updateUser = ImmutableUser.newUser(user).active(false).toUser()
                updateUserValidationResult = userService.validateUpdateUser(updateUser)
                if (updateUserValidationResult.isValid()) {
                    //userService.updateUser(updateUserValidationResult)                   
                    //log.info "Deactivated ${updateUser.name}"
                    log.info "User: ${it.name} with Full Name: ${it.displayName} has been inactive since ${d}"
                    count++
                } else {
                    log.error "Update of ${user.name} failed: ${updateUserValidationResult.getErrorCollection().getErrors().entrySet().join(',')}"
                }
            }
        }
        
    }
}
"${count} users deactivated.\n"